package bean;

import java.util.ArrayList;

public class TradeSystemBean {

	private ArrayList<OrderBean> saleOrders;
	private ArrayList<OrderBean> buyOrders;
	private ArrayList<String> allSecurities;
	private ArrayList<ClosedOrderBean> closedOrders;
	
	enum status {buy, sell};

	public TradeSystemBean() {
		saleOrders = new ArrayList<OrderBean>();
		buyOrders = new ArrayList<OrderBean>();
		allSecurities = new ArrayList<String>();
		closedOrders = new ArrayList<ClosedOrderBean>();
	}

	public void addSecurity(String security) {
		allSecurities.add(security);
	}

	public boolean securityExists(String security) {
		return allSecurities.contains(security);
	}

	public void addSaleOrder(OrderBean sellOrder) {
		saleOrders.add(sellOrder);
		OrderBean matchingBuyOrder = matchingOrderExists(sellOrder, saleOrders);
		if(matchingBuyOrder != null){
			closeDeal(matchingBuyOrder, sellOrder);
		}
	}

	public void addBuyOrder(OrderBean buyOrder) {
		buyOrders.add(buyOrder);
		OrderBean matchingSellOrder = matchingOrderExists(buyOrder, buyOrders);
		if(matchingSellOrder != null){
			closeDeal(buyOrder, matchingSellOrder);
		}
	}

	/**
	 * A method that closes a Deal based on a buyorder and a sell order
	 * @param buyOrder
	 * @param sellOrder
	 * @return
	 */
	public boolean closeDeal(OrderBean buyOrder, OrderBean sellOrder) {
		if (buyOrder.getPrice() > sellOrder.getPrice()) {
			ClosedOrderBean closedOrder = new ClosedOrderBean(buyOrder,
					sellOrder);

			// Adjust the buy/sell order size or remove if empty
			if (closedOrder.getAmount() >= buyOrder.getAmount()) {
				buyOrders.remove(buyOrder);
			} else {
				buyOrder.setAmount(buyOrder.getAmount()
						- closedOrder.getAmount());
			}

			if (closedOrder.getAmount() >= sellOrder.getAmount()) {
				saleOrders.remove(sellOrder);
			} else {
				sellOrder.setAmount(sellOrder.getAmount()
						- closedOrder.getAmount());
			}
			
			closedOrders.add(closedOrder);
			
			return true;
		}

		return false;
	}
	
	public ArrayList<ClosedOrderBean> getClosedOrders(){
		return closedOrders;
	}
	
	private OrderBean matchingOrderExists(OrderBean order,
			ArrayList<OrderBean> orderList ) {
		OrderBean matchingOrder;
		String name = order.getName();
		for(OrderBean iterateOrder : orderList){
			if(iterateOrder.getName() ==)
		}
		return null;
	}

	
	
}

